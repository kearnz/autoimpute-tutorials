(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{32:function(e,t,n){e.exports=n(393)},38:function(e,t,n){},39:function(e,t,n){},393:function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a),s=n(26),o=n.n(s),r=(n(38),n(2)),l=n(3),m=n(5),u=n(4),p=n(6),c=(n(39),function(e){function t(){return Object(r.a)(this,t),Object(m.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(l.a)(t,[{key:"render",value:function(){return i.a.createElement("div",null,i.a.createElement("h2",null,"THIS IS THE CONTACT PAGE"))}}]),t}(a.Component)),d=n(27),h=n.n(d),g=n(395),f=n(31),y=function(e){function t(){return Object(r.a)(this,t),Object(m.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(l.a)(t,[{key:"render",value:function(){var e=this.props,t=e.language,n=e.value;return i.a.createElement(g.a,{language:t,style:f.docco},n)}}]),t}(a.PureComponent);y.defaultProps={language:null};var b=y,w=function(e){function t(){return Object(r.a)(this,t),Object(m.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(l.a)(t,[{key:"render",value:function(){return i.a.createElement(h.a,{source:'\n## Welcome to Autoimpute!\n[![PyPI version](https://badge.fury.io/py/autoimpute.svg)](https://badge.fury.io/py/autoimpute) [![Build Status](https://travis-ci.com/kearnz/autoimpute.svg?branch=master)](https://travis-ci.com/kearnz/autoimpute) [![Documentation Status](https://readthedocs.org/projects/autoimpute/badge/?version=latest)](https://autoimpute.readthedocs.io/en/latest/?badge=latest) [![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://lbesson.mit-license.org/) [![Python 3.6+](https://img.shields.io/badge/python-3.6+-blue.svg)](https://www.python.org/downloads/release/python-360/)\n\n[Autoimpute](https://pypi.org/project/autoimpute/) is a Python package for analysis and implementation of <b>Imputation Methods!</b>\n\n[Check out our docs](https://autoimpute.readthedocs.io/en/latest/) to pick up the developer guide.\n\n![image](https://github.com/kearnz/autoimpute-tutorials/tree/master/src/static/images/comparing/)\n\n### Installation\n* `Autoimpute` is now **registered with PyPI!** Download with `pip install autoimpute`.\n* The latest version of `Autoimpute` is `0.11.3`.\n* If `pip` cached an older version, try `pip install --no-cache-dir --upgrade autoimpute`.\n* If you want to work with the development branch, use the script below:\n\n### Motivation\nMost machine learning algorithms expect clean and complete datasets, but real-world data is messy and missing. Unfortunately, handling missing data is quite complex, so programming languages generally punt this responsibility to the end user. By default, R drops all records with missing data - a method that is easy to implement but often problematic in practice. For richer imputation strategies, R has multiple packages to deal with missing data (`MICE`, `Amelia`, `TSImpute`, etc.). Python users are not as fortunate. Python\'s `scikit-learn` throws a runtime error when an end user deploys models on datasets with missing records, and few third-party packages exist to handle imputation end-to-end.\n\nTherefore, this package aids the Python user by providing more clarity to the imputation process, making imputation methods more accessible, and measuring the impact imputation methods have in supervised regression and classification. In doing so, this package brings missing data imputation methods to the Python world and makes them work nicely in Python machine learning projects (and specifically ones that utilize `scikit-learn`). Lastly, this package provides its own implementation of supervised machine learning methods that extend both `scikit-learn` and `statsmodels` to mutiply imputed datasets.\n\n### Main Features\n* Utility functions to examine patterns in missing data and decide on relevant features for imputation\n* Missingness classifier and automatic missing data test set generator\n* Native handling for categorical variables (as predictors and targets of imputation)\n* Single and multiple imputation classes for `pandas` `DataFrames`\n* Custom visualization support for utility functions and imputation methods\n* Analysis methods and pooled parameter inference using multiply imputed datasets\n* Numerous imputation methods, as specified in the table below:\n\n### Imputation Methods Supported\n\n| Univariate                  | Multivariate                        | Time Series / Interpolation\n| :-------------------------- | :---------------------------------- | ---------------------------\n| Mean                        | Linear Regression                   | Linear \n| Median                      | Binomial Logistic Regression        | Quadratic \n| Mode                        | Multinomial Logistic Regression     | Cubic\n| Random                      | Stochastic Regression               | Polynomial\n| Norm                        | Bayesian Linear Regression          | Spline\n| Categorical                 | Bayesian Binary Logistic Regression | Time-weighted\n|                             | Predictive Mean Matching            | Next Obs Carried Backward\n|                             | Local Residual Draws                | Last Obs Carried Forward\n\n### Todo\n* Additional cross-sectional methods, including random forest, KNN, EM, and maximum likelihood\n* Additional time-series methods, including EWMA, ARIMA, Kalman filters, and state-space models\n* Extended support for visualization of missing data patterns, imputation methods, and analysis models\n* Additional support for analysis metrics and analyis models after multiple imputation\n* Multiprocessing and GPU support for larger datasets, as well as integration with `dask` DataFrames\n\n### Example Usage\nAutoimpute is designed to be user friendly and flexible. When performing imputation, Autoimpute fits directly into `scikit-learn` machine learning projects. Imputers inherit from sklearn\'s `BaseEstimator` and `TransformerMixin` and implement `fit` and `transform` methods, making them valid Transformers in an sklearn pipeline.\n\nRight now, there are two `Imputer` classes we\'ll work with:\n```python\nfrom autoimpute.imputations import SingleImputer, MultipleImputer\nsi = SingleImputer() # imputation methods, passing through the data once\nmi = MultipleImputer() # imputation methods, passing through the data multiple times\n```\n\nImputations can be as simple as:\n```python\n# simple example using default instance of MultipleImputer\nimp = MultipleImputer()\n\n# fit transform returns a generator by default, calculating each imputation method lazily\nimp.fit_transform(data)\n```\n\nOr quite complex, such as:\n```python\n# create a complex instance of the MultipleImputer\n# Here, we specify strategies by column and predictors for each column\n# We also specify what additional arguments any pmm strategies should take\nimp = MultipleImputer(\n    n=10,\n    strategy={"salary": "pmm", "gender": "bayesian binary logistic", "age": "norm"},\n    predictors={"salary": "all", "gender": ["salary", "education", "weight"]},\n    imp_kwgs={"pmm": {"fill_value": "random"}},\n    visit="left-to-right",\n    return_list=True\n)\n\n# Because we set return_list=True, imputations are done all at once, not evaluated lazily.\n# This will return M*N, where M is the number of imputations and N is the size of original dataframe.\nimp.fit_transform(data)\n```\n\nAutoimpute also extends supervised machine learning methods from `scikit-learn` and `statsmodels` to apply them to multiply imputed datasets (using the `MultipleImputer` under the hood). Right now, Autoimpute supports linear regression and binary logistic regression. Additional supervised methods are currently under development.\n\nAs with Imputers, Autoimpute\'s analysis methods can be simple or complex:\n```python\nfrom autoimpute.analysis import MiLinearRegression\n\n# By default, use statsmodels OLS and MultipleImputer()\nsimple_lm = MiLinearRegression()\n\n# fit the model on each multiply imputed dataset and pool parameters\nsimple_lm.fit(X_train, y_train)\n\n# get summary of fit, which includes pooled parameters under Rubin\'s rules\n# also provides diagnostics related to analysis after multiple imputation\nsimple_lm.summary()\n\n# make predictions on a new dataset using pooled parameters\npredictions = simple_lm.predict(X_test)\n\n# Control both the regression used and the MultipleImputer itself\nmultiple_imputer_arguments = dict(\n    n=3,\n    strategy={"salary": "pmm", "gender": "bayesian binary logistic", "age": "norm"},\n    predictors={"salary": "all", "gender": ["salary", "education", "weight"]},\n    imp_kwgs={"pmm": {"fill_value": "random"}},\n    visit="left-to-right"\n)\ncomplex_lm = MiLinearRegression(\n    model_lib="sklearn", # use sklearn linear regression\n    mi_kwgs=multiple_imputer_arguments # control the multiple imputer\n)\n\n# fit the model on each multiply imputed dataset\ncomplex_lm.fit(X_train, y_train)\n\n# get summary of fit, which includes pooled parameters under Rubin\'s rules\n# also provides diagnostics related to analysis after multiple imputation\ncomplex_lm.summary()\n\n# make predictions on new dataset using pooled parameters\npredictions = complex_lm.predict(X_test)\n```\n\nNote that we can also pass a pre-specified `MultipleImputer` to either analysis model instead of using `mi_kwgs`. The option is ours, and it\'s a matter of preference. If we pass a pre-specified `MultipleImputer`, anything in `mi_kwgs` is ignored, although the `mi_kwgs` argument is still validated.\n\n```python\nfrom autoimpute.imputations import MultipleImputer\nfrom autoimpute.analysis import MiLinearRegression\n\n# create a multiple imputer first\ncustom_imputer = MultipleImputer(n=3, strategy="pmm", return_list=True)\n\n# pass the imputer to a linear regression model\ncomplex_lm = MiLinearRegression(mi=custom_imputer, model_lib="statsmodels")\n\n# proceed the same as the previous examples\ncomplex_lm.fit(X_train, y_train).predict(X_test)\ncomplex_lm.summary()\n```\n\n### Versions and Dependencies\n* Python 3.6+\n* Dependencies:\n    - `numpy` >= 1.15.4\n    - `scipy` >= 1.2.1\n    - `pandas` >= 0.20.3\n    - `statsmodels` >= 0.9.0\n    - `scikit-learn` >= 0.20.2\n    - `xgboost` >= 0.83\n    - `pymc3` >= 3.5\n    - `seaborn` >= 0.9.0\n    - `missingno` >= 0.4.1\n\n*A note for Windows Users*:\n* Autoimpute works on Windows but users may have trouble with pymc3 for bayesian methods. [(See discourse)](https://discourse.pymc.io/t/an-error-message-about-cant-pickle-fortran-objects/1073)\n* Users may receive a runtime error `\u2018can\u2019t pickle fortran objects\u2019` when sampling using multiple chains.\n* There are a couple of things to do to try to overcome this error:\n    - Reinstall theano and pymc3. Make sure to delete .theano cache in your home folder.\n    - Upgrade joblib in the process, which is reponsible for generating the error (pymc3 uses joblib under the hood).\n    - Set `cores=1` in `pm.sample`. This should be a last resort, as it means posterior sampling will use 1 core only. Not using multiprocessing will slow down bayesian imputation methods significantly.\n* Reach out and let us know if you\'ve worked through this issue successfully on Windows and have a better solution!\n\n### License\nDistributed under the MIT license. See [LICENSE](https://github.com/kearnz/autoimpute/blob/master/LICENSE) for more information.\n\n### Contributing\nGuidelines for contributing to our project. See [CONTRIBUTING](https://github.com/kearnz/autoimpute/blob/master/CONTRIBUTING.md) for more information.\n\n### Contributor Code of Conduct\nAdapted from Contributor Covenant, version 1.0.0. See [Code of Conduct](https://github.com/kearnz/autoimpute/blob/master/CODE_OF_CONDUCT.md) for more information.\n',escapeHtml:!1,renderers:{code:b}})}}]),t}(a.Component),v=function(e){var t=window.location.pathname+window.location.search,n=e.path===t?"nav-item active":"nav-item",a=e.disabled?"nav-link disabled":"nav-link";return i.a.createElement("li",{className:n},i.a.createElement("a",{onClick:function(){return e.onClick()},href:e.path,className:a},e.name,e.path===t?i.a.createElement("span",{className:"sr-only"},"(current)"):""))},k=function(e){function t(e){var n;return Object(r.a)(this,t),(n=Object(m.a)(this,Object(u.a)(t).call(this,e))).state={isToggleOn:!1},n}return Object(p.a)(t,e),Object(l.a)(t,[{key:"showDropdown",value:function(e){e.preventDefault(),this.setState(function(e){return{isToggleOn:!e.isToggleOn}})}},{key:"render",value:function(){var e=this,t="dropdown-menu"+(this.state.isToggleOn?" show":"");return i.a.createElement("li",{className:"nav-item dropdown"},i.a.createElement("a",{className:"nav-link dropdown-toggle",id:"navbarDropdown",role:"button","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false",onClick:function(t){e.showDropdown(t)}},this.props.name),i.a.createElement("div",{className:t,"aria-labelledby":"navbarDropdown"},this.props.children))}}]),t}(a.Component),I=function(e){function t(e){var n;return Object(r.a)(this,t),(n=Object(m.a)(this,Object(u.a)(t).call(this,e))).state={activeKey:1,df:"/autoimpute-tutorials/"},n}return Object(p.a)(t,e),Object(l.a)(t,[{key:"handleClick",value:function(e){this.setState({activeKey:e})}},{key:"render",value:function(){return i.a.createElement("div",{className:"main-page"},i.a.createElement("nav",{className:"navbar navbar-expand-lg"},i.a.createElement("a",{className:"navbar-brand",href:this.state.df},"Autoimpute"),i.a.createElement("div",{className:"collapse navbar-collapse",id:"navbarSupportedContent"},i.a.createElement("ul",{className:"navbar-nav mr-auto"},i.a.createElement(v,{name:"Home",onClick:this.handleClick.bind(this,1)}),i.a.createElement(v,{name:"Contact",onClick:this.handleClick.bind(this,2)}),i.a.createElement(k,{name:"Tutorials"},i.a.createElement("a",{className:"dropdown-item",href:this.props.path,onClick:this.handleClick.bind(this,3.1)},"Exploring Missingness"),i.a.createElement("a",{className:"dropdown-item",href:this.props.path,onClick:this.handleClick.bind(this,3.2)},"Imputers: Part I"),i.a.createElement("a",{className:"dropdown-item",href:this.props.path,onClick:this.handleClick.bind(this,3.3)},"Imputers: Part II"),i.a.createElement("a",{className:"dropdown-item",href:this.state.path,onClick:this.handleClick.bind(this,3.4)},"Imputers: Part III"),i.a.createElement("a",{className:"dropdown-item",href:this.state.path,onClick:this.handleClick.bind(this,3.5)},"Comparing Imputation Methods"))))),i.a.createElement("div",{className:"content"},i.a.createElement("img",{alt:"output",src:"./img/comparing/output_4_0.png"}),1===this.state.activeKey?i.a.createElement(w,null):null,2===this.state.activeKey?i.a.createElement(c,null):null,this.state.activeKey>2?"Tutorials coming soon! "+this.state.activeKey:null))}}]),t}(i.a.Component),C=function(e){function t(){return Object(r.a)(this,t),Object(m.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(l.a)(t,[{key:"render",value:function(){return i.a.createElement("div",null,i.a.createElement(I,null))}}]),t}(a.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));n(392);o.a.render(i.a.createElement(C,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[32,1,2]]]);
//# sourceMappingURL=main.385c6617.chunk.js.map